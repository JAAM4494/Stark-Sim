package starkemulator;

import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.util.*;
import java.io.*;

                /**** ACTION CODE ****/

action code {:
    Hashtable table = new Hashtable();
    TablaSim tablaSim=new TablaSim();
    Errores reportadorErr = new Errores();
:}

                /**** PARSER CODE ****/

parser code {:

ArrayList<String> arraySyntax = new ArrayList<String>();
ArrayList<String> arraySemantic = new ArrayList<String>();

// protected int error_sync_size () {
//        System.out.println(":error_sync_size was called.");
//        return 4;}

 public void syntax_error(Symbol cur_token) {
                System.out.println("ERROR, syntax error on token: " + cur_token.value);
                arraySyntax.add("ERROR, syntax error on token: " + cur_token.value);
                report_error("ERROR, syntax error", null);
}

public void unrecovered_syntax_error(Symbol cur_token) {
            System.out.println("ERROR, unreovered syntax error");
}

 public void semanticError(String pCurToken,String pMsg) {
                System.out.println("ERROR, semantic error on token: " + pCurToken + " " + pMsg);
                arraySemantic.add("ERROR, semantic error on token: " + pCurToken + " " + pMsg);
}

:};

                /**** TERMINALES ****/

terminal   Plus,        Min,     Mul,        And,       Nand,    Or,       Xor;
terminal   Shl,         Shr,     Sb,         Lb,        Sw,      Lw;
terminal   Smw,         Lmw,     Je,         Jne,       Jlt;
terminal   Jgt,         J;

terminal   R0,     R1,     R2,     R3,     R4;
terminal   R5,     R6,     R7,     R8,     R9;
terminal   R10,    R11,    R12,    R13,    R14;
terminal   R15;

terminal   OpPar,    ClPar;
terminal   OpKey,    ClKey; 

terminal   String Num;
terminal   ID;

                /**** NO TERMINALES ****/

non terminal    PROGRAMA;
non terminal    LISTAVARIABLES,         DECLARACIONVARIABLE;
non terminal    LISTADECLARACIONES,     DECLARACION;
non terminal    MOVER,                  VOZ,                 DECLARACIONSELECCION,       PALABRA;
non terminal    DECLARACIONITERACION,   TIPO;
non terminal    OPERADORSUMA;
non terminal    EXPRESIONCONDICION,     OPERADORMULT;
non terminal    OPERADORRELACIONAL;
non terminal    LISTADECLARACIONESCONDICIONADAS;

non terminal EXPRESIONSUMA, EXPRESIONMULT, TERMINO;
non terminal EXPRESION;

non terminal BOCA,          OJOS,              CABEZA;
non terminal DIRECCIONES,   DIRECCIONBOCA,     DIRECCIONHEAD;

non terminal ASIGNACIONES,  ASIGNAR;

                /**** PRECEDENCIAS ****/

precedence left Sino;
precedence left Suma, Resta;
precedence left Divi, Multi;

                /**** INICIO DE LA GRAMATICA ****/

start with PROGRAMA;

PROGRAMA ::= LISTAVARIABLES ASIGNACIONES LISTADECLARACIONES {: reportadorErr.reportarErrores(arraySyntax,arraySemantic); :}
           ;

ASIGNACIONES ::= ASIGNACIONES ASIGNAR | ASIGNAR 
                | error;

ASIGNAR ::= Asignar ID:id Eq Num:n {: RESULT=id;
                            if(table.containsKey(id.toString())){
                                table.replace(id.toString(),new Integer(n));
                                tablaSim.writeSymbol(id.toString(), new Integer(n));
                            }
                            else{
                                System.out.println("VARIABLE NO DECLARADA");
                                parser.semanticError(id.toString(),"variable sin declarar");
                            }:}
                            ;

LISTAVARIABLES ::= LISTAVARIABLES DECLARACIONVARIABLE:d 
                 | DECLARACIONVARIABLE:d 
                 | error;

DECLARACIONVARIABLE ::= Declarar ID:id NewLine {:
                        RESULT= id;
                        table.put(id.toString(),-1);:}
                        ;

LISTADECLARACIONES ::=  LISTADECLARACIONES DECLARACION
                      | DECLARACION
                      | error;

DECLARACION ::=  MOVER:d {: RESULT= d; :}
               | VOZ:d {: RESULT= d; :}
               | DECLARACIONSELECCION:d {: RESULT= d; :}
               | DECLARACIONITERACION:d {: RESULT= d; :}
               ;

MOVER ::=  Mover TIPO:d NewLine {: RESULT= d; :};

VOZ ::= Decir PALABRA:d {: RESULT= d; :};

PALABRA ::= Hola:d    {: RESULT= d.toString(); :}  
          | Adios:d   {: RESULT= d.toString(); :}  
          | Lindos:d  {: RESULT= d.toString(); :}  
          | Pura:d    {: RESULT= d.toString(); :}  	
          | Vida:d    {: RESULT= d.toString(); :}
          ;

TIPO ::= OJOS:d    {: RESULT= d.toString(); :} 
       | CABEZA:d  {: RESULT= d.toString(); :}
       | BOCA:d    {: RESULT= d.toString(); :}
       ;

OJOS ::= Ojos DIRECCIONES:d {: RESULT= d.toString(); :};

CABEZA ::= Cabeza DIRECCIONHEAD:d {: RESULT= d.toString(); :};

BOCA ::= Boca DIRECCIONBOCA:d {: RESULT= d.toString(); :};

DIRECCIONES ::= Izquierda:d {: RESULT= d.toString(); :}  
              | Arriba:d    {: RESULT= d.toString(); :}  
              | Derecha:d   {: RESULT= d.toString(); :}  
              | Abajo:d     {: RESULT= d.toString(); :}
              ;

DIRECCIONHEAD ::= Izquierda:d {: RESULT= d.toString(); :} 
                | Derecha:d   {: RESULT= d.toString(); :}
                ;

DIRECCIONBOCA ::= Arriba:d {: RESULT= d.toString(); :}
                | Abajo:d  {: RESULT= d.toString(); :}
                ;

OPERADORSUMA ::= Suma:d  {: RESULT= d.toString(); :}
               | Resta:d {: RESULT= d.toString(); :};

OPERADORMULT ::= Multi:d  {: RESULT= d.toString(); :}
               | Divi:d   {: RESULT= d.toString(); :};

EXPRESION ::= ID:id Eq EXPRESIONSUMA:expr {: if(!table.containsKey(id.toString())){
                                                    System.out.println("Variable no declarada");
                                                    parser.semanticError(id.toString(),"variable sin declarar");
                                               } else {
                                                    if((Integer)table.get(id.toString())==-1){
                                                    System.out.println("Null_Exception");
                                                    parser.semanticError(id.toString(),"Null_Exception");
                                                }
                                                }
                                               
 :}  
            | EXPRESIONSUMA OPERADORRELACIONAL EXPRESIONSUMA
            | EXPRESIONSUMA:d {: RESULT= d; :}
            ;

OPERADORRELACIONAL ::= Menor:d {: RESULT= d.toString(); :}  
                    |  Mayor:d {: RESULT= d.toString(); :}
                    |  MenorEq:d {: RESULT= d.toString(); :}
                    |  MayorEq:d {: RESULT= d.toString(); :}
                    |  EqEq:d {: RESULT= d.toString(); :}
                    |  Diferente:d {: RESULT= d.toString(); :}
                    ;

EXPRESIONSUMA ::= EXPRESIONSUMA:n OPERADORSUMA:d TERMINO:m {: if("+".equals(d.toString())){RESULT= new Integer(((Integer)n).intValue()+((Integer)m).intValue());}
                                                              else{RESULT= new Integer(((Integer)n).intValue()- ((Integer)m).intValue());} :} 
 		| EXPRESIONMULT:d {: RESULT= d; :};

EXPRESIONMULT ::= EXPRESIONMULT:n OPERADORMULT:d EXPRESIONSUMA:m {:if("/".equals(d.toString())){
                                                                 if((Integer)m==0){System.out.println("division entre cero");
                                                                    parser.semanticError(m.toString(),"division entre cero"); RESULT= new Integer(0);}
                                                                 else{RESULT=new Integer(((Integer)n).intValue()/((Integer)m).intValue());}}
                                                                 else{RESULT= new Integer(((Integer)n).intValue()*((Integer)m).intValue());}:}
                | TERMINO:d {: RESULT= d; :};

TERMINO ::=  OpParenth:OP EXPRESION:d CloseParenth:CP {: RESULT= d; :}
          | ID:d {: Integer value = (Integer) table.get(d);
            if(value==null){ parser.semanticError(d.toString(),"Null_Exception");
                            value = new Integer (0);}
            RESULT= value;:}
          | Num:d {: RESULT= new Integer(d); :};

EXPRESIONCONDICION ::= EXPRESION:d {: RESULT= d; :}
                     | True:cond   {: RESULT= cond; :}
                     | False:cond2 {: RESULT= cond2; :};

LISTADECLARACIONESCONDICIONADAS ::= DECLARACION:d {: RESULT= d; :}
                                  | OpKey:a LISTADECLARACIONES:list CloseKey:b {: RESULT= list; :};

DECLARACIONSELECCION ::= Si:cond OpParenth:LP EXPRESIONCONDICION:expr CloseParenth:RP Entonces:then LISTADECLARACIONESCONDICIONADAS:list 
                      {: RESULT= list; :}
                    | Si:cond OpParenth:LP EXPRESIONCONDICION CloseParenth:RP Entonces:then LISTADECLARACIONESCONDICIONADAS:list Sino:cond2 LISTADECLARACIONESCONDICIONADAS:list2;

DECLARACIONITERACION ::=  Mientras:cond OpParenth:OP EXPRESIONCONDICION:expr CloseParenth:CP Haga:cond2 LISTADECLARACIONESCONDICIONADAS:list 
 			| Haga:cond LISTADECLARACIONESCONDICIONADAS:list Mientras:cond2 OpParenth EXPRESION:expr CloseParenth;

                                /**** FIN DE LA GRAMATICA ****/