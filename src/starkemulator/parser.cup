package starkemulator;

import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.util.*;
import java.io.*;

import starkemulator.arch.Register;
import starkemulator.arch.ALU;

                /**** ACTION CODE ****/

action code {:

ALU alu = new ALU();
    
:}

                /**** PARSER CODE ****/

parser code {:

ArrayList<String> arraySyntax = new ArrayList<String>();
ArrayList<String> arraySemantic = new ArrayList<String>();

// protected int error_sync_size () {
//        System.out.println(":error_sync_size was called.");
//        return 4;}

 public void syntax_error(Symbol cur_token) {
                System.out.println("ERROR, syntax error on token: " + cur_token.value);
                arraySyntax.add("ERROR, syntax error on token: " + cur_token.value);
                report_error("ERROR, syntax error", null);
}

public void unrecovered_syntax_error(Symbol cur_token) {
            System.out.println("ERROR, unreovered syntax error");
}

 public void semanticError(String pCurToken,String pMsg) {
                System.out.println("ERROR, semantic error on token: " + pCurToken + " " + pMsg);
                arraySemantic.add("ERROR, semantic error on token: " + pCurToken + " " + pMsg);
}

:};

                /**** TERMINALES ****/

terminal   Plus,        Min,     Mul,        And,       Nand,    Or,       Xor;
terminal   Shl,         Shr,     Sb,         Lb,        Sw,      Lw;
terminal   Smw,         Lmw,     Je,         Jne,       Jlt;
terminal   Jgt,         J;

terminal   R0,     R1,     R2,     R3,     R4;
terminal   R5,     R6,     R7,     R8,     R9;
terminal   R10,    R11,    R12,    R13,    R14;
terminal   R15;

terminal   OpPar,    ClPar;
terminal   OpKey,    ClKey; 

terminal   String Num;
terminal   ID;
terminal   NewLine, SemCo;
terminal   Hexadecimal;


terminal    Comma, Tag, Points;


                /**** NO TERMINALES ****/

non terminal    PROGRAMA;

non terminal     PLUS_COPERAND, INMEDIATE;

non terminal String   REGISTERS;

non terminal    STATEMENT, STATEMENTLIST;

non terminal    MIN_STATEMENT, PLUS_STATEMENT, MUL_STATEMENT;

non terminal    AND_STATEMENT, NAND_STATEMENT, OR_STATEMENT, XOR_STATEMENT ;

non terminal    SHL_STATEMENT, SHR_STATEMENT;


non terminal    SB_STATEMENT, LB_STATEMENT;

non terminal    SHW_STATEMENT , LHW_STATEMENT;

non terminal    SW_STATEMENT , LW_STATEMENT;

non terminal    JE_STATEMENT, JNE_STATEMENT, JLT_STATEMENT, JGT_STATEMENT ,J_STATEMENT;

non terminal    TAG_STATEMENT ;

non terminal    COPERAND;


                /**** PRECEDENCIAS ****/



                /**** INICIO DE LA GRAMATICA ****/

start with PROGRAMA;

PROGRAMA ::=  STATEMENTLIST ;


STATEMENTLIST  ::= STATEMENTLIST STATEMENT | STATEMENT  ;


STATEMENT ::= PLUS_STATEMENT:e {: System.out.println("+ " + e); :}  | MIN_STATEMENT | MUL_STATEMENT | 
AND_STATEMENT | NAND_STATEMENT | OR_STATEMENT | XOR_STATEMENT |
 SHL_STATEMENT | SHR_STATEMENT | SB_STATEMENT | 
LB_STATEMENT | SHW_STATEMENT | LHW_STATEMENT | SW_STATEMENT | LW_STATEMENT |
  JE_STATEMENT | JNE_STATEMENT | JLT_STATEMENT | JGT_STATEMENT | J_STATEMENT
 | TAG_STATEMENT ;

PLUS_STATEMENT ::= Plus:p REGISTERS:s Comma REGISTERS:d Comma COPERAND:t NewLine {: alu.aluArithmeticLogicAdmin(0,s,d,t.toString());  :}  ;

MIN_STATEMENT ::= Min REGISTERS:s Comma REGISTERS:d Comma COPERAND:t NewLine {: alu.aluArithmeticLogicAdmin(1,s,d,t.toString());   :}  ;

MUL_STATEMENT ::= Mul REGISTERS:s Comma REGISTERS:d Comma COPERAND:t NewLine{: alu.aluArithmeticLogicAdmin(2,s,d,t.toString());    :}  ; 


AND_STATEMENT ::= And REGISTERS:s Comma REGISTERS:d Comma COPERAND:t NewLine {: alu.aluArithmeticLogicAdmin(3,s,d,t.toString());   :}  ; 

NAND_STATEMENT ::= Nand REGISTERS:s Comma REGISTERS:d Comma COPERAND:t NewLine {: alu.aluArithmeticLogicAdmin(6,s,d,t.toString());   :}  ; 

OR_STATEMENT ::= Or REGISTERS:s Comma REGISTERS:d Comma COPERAND:t NewLine {: alu.aluArithmeticLogicAdmin(4,s,d,t.toString());   :} ;

XOR_STATEMENT ::= Xor REGISTERS:s Comma REGISTERS:d Comma COPERAND:t NewLine  {: alu.aluArithmeticLogicAdmin(5,s,d,t.toString());   :} ;

SHL_STATEMENT ::= Shl REGISTERS Comma REGISTERS Comma INMEDIATE NewLine ; 

SHR_STATEMENT ::= Shr REGISTERS Comma REGISTERS Comma INMEDIATE NewLine ; 



SB_STATEMENT ::= Sb REGISTERS Comma COPERAND OpPar REGISTERS ClPar NewLine  ; 

LB_STATEMENT ::= Lb REGISTERS Comma COPERAND OpPar REGISTERS ClPar NewLine  ; 

SHW_STATEMENT ::= Smw REGISTERS Comma COPERAND OpPar REGISTERS ClPar NewLine  ; 

LHW_STATEMENT ::= Lmw REGISTERS Comma COPERAND OpPar REGISTERS ClPar NewLine  ; 


SW_STATEMENT ::= Sw REGISTERS Comma COPERAND OpPar REGISTERS ClPar NewLine  ; 

LW_STATEMENT ::= Lw REGISTERS Comma COPERAND OpPar REGISTERS ClPar NewLine  ;



JE_STATEMENT ::= Je REGISTERS Comma REGISTERS Comma ID NewLine ;

JNE_STATEMENT ::= Jne REGISTERS Comma REGISTERS Comma ID NewLine ;

JLT_STATEMENT ::= Jlt REGISTERS Comma REGISTERS Comma ID NewLine ;

JGT_STATEMENT ::= Jgt REGISTERS Comma REGISTERS Comma ID NewLine ;


J_STATEMENT ::= J ID:id NewLine  ;

TAG_STATEMENT ::= ID  Points NewLine ;

COPERAND ::= INMEDIATE:d {: RESULT=d; :}   |  REGISTERS:d {: RESULT=d; :} ;


INMEDIATE ::= (Tag Num ):d {: RESULT=d; :}   |  ( Hexadecimal):d {: RESULT=d; :} ;


REGISTERS ::= R0:s{: RESULT=s.toString(); :}  | R1:s {: RESULT=s.toString(); :} | R2:s {: RESULT=s.toString(); :} | R3:s {: RESULT=s.toString(); :} 
| R4:s {: RESULT=s.toString(); :} | R5:s {: RESULT=s.toString(); :} 
| R6:s {: RESULT=s.toString(); :} | 
R7:s {: RESULT=s.toString(); :} | R8:s {: RESULT=s.toString(); :} 
| R9:s {: RESULT=s.toString(); :} | R10:s {: RESULT=s.toString(); :} |
 R11:s {: RESULT=s.toString(); :} |
 R12:s {: RESULT=s.toString(); :} 
| R13:s {: RESULT=s.toString(); :} | R14:s {: RESULT=s.toString(); :} |
 R15:s {: RESULT=s.toString(); :} ;